{"version":3,"file":"cls.js","sources":["../../../src/metrics/cls.ts"],"sourcesContent":["import type { SpanAttributes } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  getRootSpan,\n  htmlTreeAsString,\n  logger,\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { addClsInstrumentationHandler } from './instrument';\nimport { msToSec, startStandaloneWebVitalSpan } from './utils';\nimport { onHidden } from './web-vitals/lib/onHidden';\n\n/**\n * Starts tracking the Cumulative Layout Shift on the current page and collects the value once\n *\n * - the page visibility is hidden\n * - a navigation span is started (to stop CLS measurement for SPA soft navigations)\n *\n * Once either of these events triggers, the CLS value is sent as a standalone span and we stop\n * measuring CLS.\n */\nexport function trackClsAsStandaloneSpan(): void {\n  let standaloneCLsValue = 0;\n  let standaloneClsEntry: LayoutShift | undefined;\n  let pageloadSpanId: string | undefined;\n\n  if (!supportsLayoutShift()) {\n    return;\n  }\n\n  let sentSpan = false;\n  function _collectClsOnce() {\n    if (sentSpan) {\n      return;\n    }\n    sentSpan = true;\n    if (pageloadSpanId) {\n      sendStandaloneClsSpan(standaloneCLsValue, standaloneClsEntry, pageloadSpanId);\n    }\n    cleanupClsHandler();\n  }\n\n  const cleanupClsHandler = addClsInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1] as LayoutShift | undefined;\n    if (!entry) {\n      return;\n    }\n    standaloneCLsValue = metric.value;\n    standaloneClsEntry = entry;\n  }, true);\n\n  // TODO: Figure out if we can switch to using whenIdleOrHidden instead of onHidden\n  // use pagehide event from web-vitals\n  onHidden(() => {\n    _collectClsOnce();\n  });\n\n  // Since the call chain of this function is synchronous and evaluates before the SDK client is created,\n  // we need to wait with subscribing to a client hook until the client is created. Therefore, we defer\n  // to the next tick after the SDK setup.\n  setTimeout(() => {\n    const client = getClient();\n\n    if (!client) {\n      return;\n    }\n\n    const unsubscribeStartNavigation = client.on('startNavigationSpan', () => {\n      _collectClsOnce();\n      unsubscribeStartNavigation?.();\n    });\n\n    const activeSpan = getActiveSpan();\n    if (activeSpan) {\n      const rootSpan = getRootSpan(activeSpan);\n      const spanJSON = spanToJSON(rootSpan);\n      if (spanJSON.op === 'pageload') {\n        pageloadSpanId = rootSpan.spanContext().spanId;\n      }\n    }\n  }, 0);\n}\n\nfunction sendStandaloneClsSpan(clsValue: number, entry: LayoutShift | undefined, pageloadSpanId: string) {\n  DEBUG_BUILD && logger.log(`Sending CLS span (${clsValue})`);\n\n  const startTime = msToSec((browserPerformanceTimeOrigin() || 0) + (entry?.startTime || 0));\n  const routeName = getCurrentScope().getScopeData().transactionName;\n\n  const name = entry ? htmlTreeAsString(entry.sources[0]?.node) : 'Layout shift';\n\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.cls',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'ui.webvital.cls',\n    [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: entry?.duration || 0,\n    // attach the pageload span id to the CLS span so that we can link them in the UI\n    'sentry.pageload.span_id': pageloadSpanId,\n  };\n\n  // Add CLS sources as span attributes to help with debugging layout shifts\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift/sources\n  if (entry?.sources) {\n    entry.sources.forEach((source, index) => {\n      attributes[`cls.source.${index + 1}`] = htmlTreeAsString(source.node);\n    });\n  }\n\n  const span = startStandaloneWebVitalSpan({\n    name,\n    transaction: routeName,\n    attributes,\n    startTime,\n  });\n\n  if (span) {\n    span.addEvent('cls', {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: '',\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: clsValue,\n    });\n\n    // LayoutShift performance entries always have a duration of 0, so we don't need to add `entry.duration` here\n    // see: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration\n    span.end(startTime);\n  }\n}\n\nfunction supportsLayoutShift(): boolean {\n  try {\n    return PerformanceObserver.supportedEntryTypes.includes('layout-shift');\n  } catch {\n    return false;\n  }\n}\n"],"names":["addClsInstrumentationHandler","onHidden","getClient","getActiveSpan","getRootSpan","spanToJSON","DEBUG_BUILD","logger","msToSec","browserPerformanceTimeOrigin","getCurrentScope","htmlTreeAsString","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME","startStandaloneWebVitalSpan","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE"],"mappings":"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"}